/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.LclServiceArea;
import com.wm.exceptions.LclServiceAreaNotFoundException;
import com.wm.repository.LclServiceAreaRepository;

@Service
@Transactional(rollbackFor=LclServiceAreaNotFoundException.class)
public class LclServiceAreaService 
{
	private static Logger logger = LoggerFactory.getLogger(LclServiceAreaService.class);
	
	@Autowired
	private LclServiceAreaRepository lclserviceareaRepository;
		
	/*
	 * READ methods
	 */
	public Page<LclServiceArea> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaService -> findAll LclServiceAreas");
		
		return lclserviceareaRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<LclServiceArea> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaService -> findAll LclServiceAreas");
		
		return lclserviceareaRepository.findAll();
	}
/*
	public LclServiceArea findBySfid(String lclservicearea){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving LclServiceArea with sfid:" + lclservicearea);
		
		return lclserviceareaRepository.findBySfid(lclservicearea);
		
	}
*/
	public LclServiceArea get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving LclServiceArea with id:" + id);
		
		LclServiceArea elementToGet = lclserviceareaRepository.findOne(id);
		
		if (elementToGet == null)
			throw new LclServiceAreaNotFoundException(id);
		
		return elementToGet;
	}

	public LclServiceArea create(LclServiceArea lclservicearea) {

		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaService -> create:" + lclservicearea);
			
		return lclserviceareaRepository.save(lclservicearea);
	}

	public LclServiceArea update(LclServiceArea lclservicearea) {
		
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaService -> create:" + lclservicearea);

		LclServiceArea elementToUpdate = lclserviceareaRepository.findOne(lclservicearea.getId());
		
		if (elementToUpdate == null)
			throw new LclServiceAreaNotFoundException(lclservicearea.getName());
		
		elementToUpdate.update(lclservicearea);
		lclserviceareaRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public LclServiceArea delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaService -> delete:" + id);

		LclServiceArea elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new LclServiceAreaNotFoundException(id);
		
		lclserviceareaRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

