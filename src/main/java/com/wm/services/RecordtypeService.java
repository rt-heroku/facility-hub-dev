/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.Recordtype;
import com.wm.exceptions.RecordtypeNotFoundException;
import com.wm.repository.RecordtypeRepository;

@Service
@Transactional(rollbackFor=RecordtypeNotFoundException.class)
public class RecordtypeService 
{
	private static Logger logger = LoggerFactory.getLogger(RecordtypeService.class);
	
	@Autowired
	private RecordtypeRepository recordtypeRepository;
		
	/*
	 * READ methods
	 */
	public Page<Recordtype> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("RecordtypeService -> findAll Recordtypes");
		
		return recordtypeRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<Recordtype> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("RecordtypeService -> findAll Recordtypes");
		
		return recordtypeRepository.findAll();
	}
/*
	public Recordtype findBySfid(String recordtype){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Recordtype with sfid:" + recordtype);
		
		return recordtypeRepository.findBySfid(recordtype);
		
	}
*/
	public Recordtype get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Recordtype with id:" + id);
		
		Recordtype elementToGet = recordtypeRepository.findOne(id);
		
		if (elementToGet == null)
			throw new RecordtypeNotFoundException(id);
		
		return elementToGet;
	}

	public Recordtype create(Recordtype recordtype) {

		if (logger.isDebugEnabled())
			logger.debug("RecordtypeService -> create:" + recordtype);
			
		return recordtypeRepository.save(recordtype);
	}

	public Recordtype update(Recordtype recordtype) {
		
		if (logger.isDebugEnabled())
			logger.debug("RecordtypeService -> create:" + recordtype);

		Recordtype elementToUpdate = recordtypeRepository.findOne(recordtype.getId());
		
		if (elementToUpdate == null)
			throw new RecordtypeNotFoundException(recordtype.getName());
		
		elementToUpdate.update(recordtype);
		recordtypeRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public Recordtype delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("RecordtypeService -> delete:" + id);

		Recordtype elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new RecordtypeNotFoundException(id);
		
		recordtypeRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

