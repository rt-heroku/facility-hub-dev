/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.OperatingSchedule;
import com.wm.exceptions.OperatingScheduleNotFoundException;
import com.wm.repository.OperatingScheduleRepository;

@Service
@Transactional(rollbackFor=OperatingScheduleNotFoundException.class)
public class OperatingScheduleService 
{
	private static Logger logger = LoggerFactory.getLogger(OperatingScheduleService.class);
	
	@Autowired
	private OperatingScheduleRepository operatingscheduleRepository;
		
	/*
	 * READ methods
	 */
	public Page<OperatingSchedule> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("OperatingScheduleService -> findAll OperatingSchedules");
		
		return operatingscheduleRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<OperatingSchedule> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("OperatingScheduleService -> findAll OperatingSchedules");
		
		return operatingscheduleRepository.findAll();
	}
/*
	public OperatingSchedule findBySfid(String operatingschedule){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving OperatingSchedule with sfid:" + operatingschedule);
		
		return operatingscheduleRepository.findBySfid(operatingschedule);
		
	}
*/
	public OperatingSchedule get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving OperatingSchedule with id:" + id);
		
		OperatingSchedule elementToGet = operatingscheduleRepository.findOne(id);
		
		if (elementToGet == null)
			throw new OperatingScheduleNotFoundException(id);
		
		return elementToGet;
	}

	public OperatingSchedule create(OperatingSchedule operatingschedule) {

		if (logger.isDebugEnabled())
			logger.debug("OperatingScheduleService -> create:" + operatingschedule);
			
		return operatingscheduleRepository.save(operatingschedule);
	}

	public OperatingSchedule update(OperatingSchedule operatingschedule) {
		
		if (logger.isDebugEnabled())
			logger.debug("OperatingScheduleService -> create:" + operatingschedule);

		OperatingSchedule elementToUpdate = operatingscheduleRepository.findOne(operatingschedule.getId());
		
		if (elementToUpdate == null)
			throw new OperatingScheduleNotFoundException(operatingschedule.getName());
		
		elementToUpdate.update(operatingschedule);
		operatingscheduleRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public OperatingSchedule delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("OperatingScheduleService -> delete:" + id);

		OperatingSchedule elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new OperatingScheduleNotFoundException(id);
		
		operatingscheduleRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

