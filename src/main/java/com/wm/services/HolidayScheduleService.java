/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.HolidaySchedule;
import com.wm.exceptions.HolidayScheduleNotFoundException;
import com.wm.repository.HolidayScheduleRepository;

@Service
@Transactional(rollbackFor=HolidayScheduleNotFoundException.class)
public class HolidayScheduleService 
{
	private static Logger logger = LoggerFactory.getLogger(HolidayScheduleService.class);
	
	@Autowired
	private HolidayScheduleRepository holidayscheduleRepository;
		
	/*
	 * READ methods
	 */
	public Page<HolidaySchedule> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("HolidayScheduleService -> findAll HolidaySchedules");
		
		return holidayscheduleRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<HolidaySchedule> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("HolidayScheduleService -> findAll HolidaySchedules");
		
		return holidayscheduleRepository.findAll();
	}
/*
	public HolidaySchedule findBySfid(String holidayschedule){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving HolidaySchedule with sfid:" + holidayschedule);
		
		return holidayscheduleRepository.findBySfid(holidayschedule);
		
	}
*/
	public HolidaySchedule get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving HolidaySchedule with id:" + id);
		
		HolidaySchedule elementToGet = holidayscheduleRepository.findOne(id);
		
		if (elementToGet == null)
			throw new HolidayScheduleNotFoundException(id);
		
		return elementToGet;
	}

	public HolidaySchedule create(HolidaySchedule holidayschedule) {

		if (logger.isDebugEnabled())
			logger.debug("HolidayScheduleService -> create:" + holidayschedule);
			
		return holidayscheduleRepository.save(holidayschedule);
	}

	public HolidaySchedule update(HolidaySchedule holidayschedule) {
		
		if (logger.isDebugEnabled())
			logger.debug("HolidayScheduleService -> create:" + holidayschedule);

		HolidaySchedule elementToUpdate = holidayscheduleRepository.findOne(holidayschedule.getId());
		
		if (elementToUpdate == null)
			throw new HolidayScheduleNotFoundException(holidayschedule.getName());
		
		elementToUpdate.update(holidayschedule);
		holidayscheduleRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public HolidaySchedule delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("HolidayScheduleService -> delete:" + id);

		HolidaySchedule elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new HolidayScheduleNotFoundException(id);
		
		holidayscheduleRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

