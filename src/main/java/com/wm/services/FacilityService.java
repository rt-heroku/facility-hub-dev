/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.Facility;
import com.wm.exceptions.FacilityNotFoundException;
import com.wm.repository.FacilityRepository;

@Service
@Transactional(rollbackFor=FacilityNotFoundException.class)
public class FacilityService 
{
	private static Logger logger = LoggerFactory.getLogger(FacilityService.class);
	
	@Autowired
	private FacilityRepository facilityRepository;
		
	/*
	 * READ methods
	 */
	public Page<Facility> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("FacilityService -> findAll Facilitys");
		
		return facilityRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<Facility> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("FacilityService -> findAll Facilitys");
		
		return facilityRepository.findAll();
	}
/*
	public Facility findBySfid(String facility){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Facility with sfid:" + facility);
		
		return facilityRepository.findBySfid(facility);
		
	}
*/
	public Facility get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Facility with id:" + id);
		
		Facility elementToGet = facilityRepository.findOne(id);
		
		if (elementToGet == null)
			throw new FacilityNotFoundException(id);
		
		return elementToGet;
	}

	public Facility create(Facility facility) {

		if (logger.isDebugEnabled())
			logger.debug("FacilityService -> create:" + facility);
			
		return facilityRepository.save(facility);
	}

	public Facility update(Facility facility) {
		
		if (logger.isDebugEnabled())
			logger.debug("FacilityService -> create:" + facility);

		Facility elementToUpdate = facilityRepository.findOne(facility.getId());
		
		if (elementToUpdate == null)
			throw new FacilityNotFoundException(facility.getName());
		
		elementToUpdate.update(facility);
		facilityRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public Facility delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("FacilityService -> delete:" + id);

		Facility elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new FacilityNotFoundException(id);
		
		facilityRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

