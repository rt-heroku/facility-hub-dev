/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.LclServiceAreaPostalCode;
import com.wm.exceptions.LclServiceAreaPostalCodeNotFoundException;
import com.wm.repository.LclServiceAreaPostalCodeRepository;

@Service
@Transactional(rollbackFor=LclServiceAreaPostalCodeNotFoundException.class)
public class LclServiceAreaPostalCodeService 
{
	private static Logger logger = LoggerFactory.getLogger(LclServiceAreaPostalCodeService.class);
	
	@Autowired
	private LclServiceAreaPostalCodeRepository lclserviceareapostalcodeRepository;
		
	/*
	 * READ methods
	 */
	public Page<LclServiceAreaPostalCode> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaPostalCodeService -> findAll LclServiceAreaPostalCodes");
		
		return lclserviceareapostalcodeRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<LclServiceAreaPostalCode> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaPostalCodeService -> findAll LclServiceAreaPostalCodes");
		
		return lclserviceareapostalcodeRepository.findAll();
	}
/*
	public LclServiceAreaPostalCode findBySfid(String lclserviceareapostalcode){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving LclServiceAreaPostalCode with sfid:" + lclserviceareapostalcode);
		
		return lclserviceareapostalcodeRepository.findBySfid(lclserviceareapostalcode);
		
	}
*/
	public LclServiceAreaPostalCode get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving LclServiceAreaPostalCode with id:" + id);
		
		LclServiceAreaPostalCode elementToGet = lclserviceareapostalcodeRepository.findOne(id);
		
		if (elementToGet == null)
			throw new LclServiceAreaPostalCodeNotFoundException(id);
		
		return elementToGet;
	}

	public LclServiceAreaPostalCode create(LclServiceAreaPostalCode lclserviceareapostalcode) {

		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaPostalCodeService -> create:" + lclserviceareapostalcode);
			
		return lclserviceareapostalcodeRepository.save(lclserviceareapostalcode);
	}

	public LclServiceAreaPostalCode update(LclServiceAreaPostalCode lclserviceareapostalcode) {
		
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaPostalCodeService -> create:" + lclserviceareapostalcode);

		LclServiceAreaPostalCode elementToUpdate = lclserviceareapostalcodeRepository.findOne(lclserviceareapostalcode.getId());
		
		if (elementToUpdate == null)
			throw new LclServiceAreaPostalCodeNotFoundException(lclserviceareapostalcode.getName());
		
		elementToUpdate.update(lclserviceareapostalcode);
		lclserviceareapostalcodeRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public LclServiceAreaPostalCode delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("LclServiceAreaPostalCodeService -> delete:" + id);

		LclServiceAreaPostalCode elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new LclServiceAreaPostalCodeNotFoundException(id);
		
		lclserviceareapostalcodeRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

