/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.BusinessUnit;
import com.wm.exceptions.BusinessUnitNotFoundException;
import com.wm.repository.BusinessUnitRepository;

@Service
@Transactional(rollbackFor=BusinessUnitNotFoundException.class)
public class BusinessUnitService 
{
	private static Logger logger = LoggerFactory.getLogger(BusinessUnitService.class);
	
	@Autowired
	private BusinessUnitRepository businessunitRepository;
		
	/*
	 * READ methods
	 */
	public Page<BusinessUnit> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("BusinessUnitService -> findAll BusinessUnits");
		
		return businessunitRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<BusinessUnit> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("BusinessUnitService -> findAll BusinessUnits");
		
		return businessunitRepository.findAll();
	}
/*
	public BusinessUnit findBySfid(String businessunit){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving BusinessUnit with sfid:" + businessunit);
		
		return businessunitRepository.findBySfid(businessunit);
		
	}
*/
	public BusinessUnit get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving BusinessUnit with id:" + id);
		
		BusinessUnit elementToGet = businessunitRepository.findOne(id);
		
		if (elementToGet == null)
			throw new BusinessUnitNotFoundException(id);
		
		return elementToGet;
	}

	public BusinessUnit create(BusinessUnit businessunit) {

		if (logger.isDebugEnabled())
			logger.debug("BusinessUnitService -> create:" + businessunit);
			
		return businessunitRepository.save(businessunit);
	}

	public BusinessUnit update(BusinessUnit businessunit) {
		
		if (logger.isDebugEnabled())
			logger.debug("BusinessUnitService -> create:" + businessunit);

		BusinessUnit elementToUpdate = businessunitRepository.findOne(businessunit.getId());
		
		if (elementToUpdate == null)
			throw new BusinessUnitNotFoundException(businessunit.getName());
		
		elementToUpdate.update(businessunit);
		businessunitRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public BusinessUnit delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("BusinessUnitService -> delete:" + id);

		BusinessUnit elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new BusinessUnitNotFoundException(id);
		
		businessunitRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

