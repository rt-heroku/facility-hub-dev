/*
 * Created on 2017-09-12 ( Time 13:14:27 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.wm.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wm.entities.FacilityContactInformation;
import com.wm.exceptions.FacilityContactInformationNotFoundException;
import com.wm.repository.FacilityContactInformationRepository;

@Service
@Transactional(rollbackFor=FacilityContactInformationNotFoundException.class)
public class FacilityContactInformationService 
{
	private static Logger logger = LoggerFactory.getLogger(FacilityContactInformationService.class);
	
	@Autowired
	private FacilityContactInformationRepository facilitycontactinformationRepository;
		
	/*
	 * READ methods
	 */
	public Page<FacilityContactInformation> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("FacilityContactInformationService -> findAll FacilityContactInformations");
		
		return facilitycontactinformationRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<FacilityContactInformation> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("FacilityContactInformationService -> findAll FacilityContactInformations");
		
		return facilitycontactinformationRepository.findAll();
	}
/*
	public FacilityContactInformation findBySfid(String facilitycontactinformation){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving FacilityContactInformation with sfid:" + facilitycontactinformation);
		
		return facilitycontactinformationRepository.findBySfid(facilitycontactinformation);
		
	}
*/
	public FacilityContactInformation get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving FacilityContactInformation with id:" + id);
		
		FacilityContactInformation elementToGet = facilitycontactinformationRepository.findOne(id);
		
		if (elementToGet == null)
			throw new FacilityContactInformationNotFoundException(id);
		
		return elementToGet;
	}

	public FacilityContactInformation create(FacilityContactInformation facilitycontactinformation) {

		if (logger.isDebugEnabled())
			logger.debug("FacilityContactInformationService -> create:" + facilitycontactinformation);
			
		return facilitycontactinformationRepository.save(facilitycontactinformation);
	}

	public FacilityContactInformation update(FacilityContactInformation facilitycontactinformation) {
		
		if (logger.isDebugEnabled())
			logger.debug("FacilityContactInformationService -> create:" + facilitycontactinformation);

		FacilityContactInformation elementToUpdate = facilitycontactinformationRepository.findOne(facilitycontactinformation.getId());
		
		if (elementToUpdate == null)
			throw new FacilityContactInformationNotFoundException(facilitycontactinformation.getName());
		
		elementToUpdate.update(facilitycontactinformation);
		facilitycontactinformationRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public FacilityContactInformation delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("FacilityContactInformationService -> delete:" + id);

		FacilityContactInformation elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new FacilityContactInformationNotFoundException(id);
		
		facilitycontactinformationRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

